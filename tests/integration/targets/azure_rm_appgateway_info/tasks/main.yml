- name: Prepare random number
  set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: yes
- name: Set json query to only retrieve gateways from this test
  set_fact:
    query: "[?ends_with(name, `{{ rpfx }}`)]"
  run_once: yes

- name: Load app gateways
  azure_rm_appgateway_info:
  register: appgw_output
- name: Assert there are no gateways
  assert:
    that:
      - appgw_output.gateways | community.general.json_query(query) | length == 0

- name: Create virtual networks for application gateways
  azure_rm_virtualnetwork:
    name: "{{ item.name }}"
    resource_group: "{{ item.resource_group }}"
    address_prefixes_cidr:
        - 10.1.0.0/16
        - 172.100.0.0/16
    dns_servers:
        - 127.0.0.1
        - 127.0.0.2
  with_items:
    - { name: "vnet1-{{ rpfx }}", resource_group: "{{ resource_group }}" }
    - { name: "vnet2-{{ rpfx }}", resource_group: "{{ resource_group_secondary }}" }

- name: Create subnets
  azure_rm_subnet:
    name: "{{ item.name }}"
    virtual_network_name: "{{ item.vnet_name }}"
    resource_group: "{{ item.resource_group }}"
    address_prefix_cidr: 10.1.0.0/24
  with_items:
    - { name: "subnet1-{{ rpfx }}", vnet_name: "vnet1-{{ rpfx }}", resource_group: "{{ resource_group }}" }
    - { name: "subnet2-{{ rpfx }}", vnet_name: "vnet2-{{ rpfx }}", resource_group: "{{ resource_group_secondary }}" }

- name: Create application gateway instances
  azure_rm_appgateway:
    name: "{{ item.name }}"
    resource_group: "{{ item.resource_group }}"
    sku:
      name: standard_small
      tier: standard
      capacity: 2
    ssl_policy:
      policy_type: predefined
      policy_name: ssl_policy20150501
      disabled_ssl_protocols:
        - tls_v1_0
        - tls_v1_1
      cipher_suites:
        - tls_ecdhe_ecdsa_with_aes_256_gcm_sha384
    authentication_certificates:
      - name: cert1
        data: "{{ lookup('file', 'cert1.txt') }}"
    ssl_certificates:
      - name: cert2
        password: your-password
        data: "{{ lookup('file', 'cert2.txt') }}"
    gateway_ip_configurations:
      - subnet:
          name: "{{ item.subnet_name }}"
          virtual_network_name: "{{ item.vnet_name }}"
        name: app_gateway_ip_config
    frontend_ip_configurations:
      - subnet:
          name: "{{ item.subnet_name }}"
          virtual_network_name: "{{ item.vnet_name }}"
        name: sample_gateway_frontend_ip_config
    frontend_ports:
      - port: 90
        name: ag_frontend_port
      - port: 80
        name: http_frontend_port
    backend_address_pools:
      - backend_addresses:
          - ip_address: 10.0.0.4
        name: test_backend_address_pool
    probes:
     - name: custom_probe
       protocol: http
       host: 10.0.0.4
       path: /healthz
       interval: 30
       timeout: 30
       unhealthy_threshold: 3
    backend_http_settings_collection:
      - port: 80
        protocol: http
        cookie_based_affinity: enabled
        probe: custom_probe
        name: sample_appgateway_http_settings
    http_listeners:
      - frontend_ip_configuration: sample_gateway_frontend_ip_config
        frontend_port: ag_frontend_port
        protocol: https
        ssl_certificate: cert2
        name: sample_http_listener
      - frontend_ip_configuration: sample_gateway_frontend_ip_config
        frontend_port: http_frontend_port
        protocol: http
        name: http_listener
    request_routing_rules:
      - rule_type: Basic
        backend_address_pool: test_backend_address_pool
        backend_http_settings: sample_appgateway_http_settings
        http_listener: sample_http_listener
        name: rule1
      - rule_type: Basic
        http_listener: http_listener
        redirect_configuration: redirect_site_to_https
        name: http_redirect_rule
    redirect_configurations:
     - redirect_type: permanent
       target_listener: sample_http_listener
       include_path: true
       include_query_string: true
       name: redirect_site_to_https
  with_items:
    - { name: "appgw1-{{ rpfx }}", subnet_name: "subnet1-{{ rpfx }}", vnet_name: "vnet1-{{ rpfx }}", resource_group: "{{ resource_group }}" }
    - { name: "appgw2-{{ rpfx }}", subnet_name: "subnet2-{{ rpfx }}", vnet_name: "vnet2-{{ rpfx }}", resource_group: "{{ resource_group_secondary }}" }
  register: appgw_output
- name: Assert the resource instances are well created
  assert:
    that:
      - appgw_output.changed

- name: Load app gateways
  azure_rm_appgateway_info:
  register: appgw_output
- name: Assert there are the correct number of gateways
  assert:
    that:
      - appgw_output.gateways | community.general.json_query(query) | length == 2

- name: Load app gateway by name
  azure_rm_appgateway_info:
    name: "appgw1-{{ rpfx }}"
    resource_group: "{{ resource_group }}"
  register: appgw_output
- name: Assert there are the correct number of gateways
  assert:
    that:
      - appgw_output.gateways | community.general.json_query(query) | length == 1
      - (appgw_output.gateways | community.general.json_query(query))[0].name == 'appgw1-{{ rpfx }}'
      - (appgw_output.gateways | community.general.json_query(query))[0].provisioning_state == 'Succeeded'
      - (appgw_output.gateways | community.general.json_query(query))[0].operational_state == 'Running'

- name: Load app gateway by resource group
  azure_rm_appgateway_info:
    resource_group: "{{ resource_group_secondary }}"
  register: appgw_output
- name: Assert there are the correct number of gateways and they are the right ones
  assert:
    that:
      - appgw_output.gateways | community.general.json_query(query) | length == 1
      - (appgw_output.gateways | community.general.json_query(query))[0].name == 'appgw2-{{ rpfx }}'

- name: Load app gateway not found in resource group
  azure_rm_appgateway_info:
    name: "appgw1-{{ rpfx }}"
    resource_group: "{{ resource_group_secondary }}"
  register: appgw_output
- name: Assert there are no results
  assert:
    that:
      - appgw_output.gateways | community.general.json_query(query) | length == 0
