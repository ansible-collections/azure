 - name: Create storage account name
   set_fact:
       storage_account: "sa{{ resource_group | hash('md5') | truncate(22, True, '') }}"

 - name: Test invalid account name
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "invalid_char$"
   register: invalid_name     
   ignore_errors: yes  

 - name: Assert task failed
   assert: { that: "invalid_name['failed'] == True" }

 - name: Delete storage account
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "{{ storage_account }}"
       state: absent
       force_delete_nonempty: True

 - name: Create new storage account
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "{{ storage_account }}"
       account_type: Standard_LRS
       append_tags: no
       blob_cors:
          - allowed_origins:
              - http://www.example.com/
            allowed_methods:
              - GET
              - POST
            allowed_headers:
              - x-ms-meta-data*
              - x-ms-meta-target*
              - x-ms-meta-abc
            exposed_headers:
              - x-ms-meta-*
            max_age_in_seconds: 200
       tags:
           test: test
           galaxy: galaxy
       https_only: no
       network_acls:
         bypass: AzureServices
         default_action: Deny
         ip_rules:
           - value: '9.9.9.9'
             action: Allow
   register: output

 - name: Assert status succeeded and results include an Id value 
   assert:
     that:
       - output.changed
       - output.state.id is defined
       - output.state.blob_cors | length == 1
       - not output.state.https_only
       - output.state.network_acls.bypass == "AzureServices"
       - output.state.network_acls.default_action == "Deny"
       - output.state.network_acls.ip_rules | length == 1

 - name: Create new storage account (idempotence)
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "{{ storage_account }}"
       account_type: Standard_LRS
       append_tags: no
       blob_cors:
          - allowed_origins:
              - http://www.example.com/
            allowed_methods:
              - GET
              - POST
            allowed_headers:
              - x-ms-meta-data*
              - x-ms-meta-target*
              - x-ms-meta-abc
            exposed_headers:
              - x-ms-meta-*
            max_age_in_seconds: 200
       tags:
           test: test
           galaxy: galaxy
       https_only: no
       network_acls:
         bypass: AzureServices
         default_action: Deny
         ip_rules:
           - value: '9.9.9.9'
             action: Allow
   register: output
  
 - assert:
     that:
        - not output.changed

 - name: Gather facts by tags
   azure_rm_storageaccount_info:
       resource_group: "{{ resource_group }}"
       tags:
         - test
         - galaxy
   register: output

 - assert:
       that: output.storageaccounts | length >= 1

 - name: Change account type 
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "{{ storage_account }}"
       account_type: Premium_LRS
   register: change_account
   ignore_errors: yes 

 - name: Assert account type change failed 
   assert: { that: "change_account['failed'] == True" }

 - name: Change account type and add custom domain
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}"
       name: "{{ storage_account }}"
       account_type: Standard_GRS
       custom_domain: { name: ansible.com, use_sub_domain: no }
   register: change_account
   ignore_errors: yes

 - name: Assert CNAME failure
   assert: { that: "'custom domain name could not be verified' in  change_account['msg']" }

 - name: Update account tags
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}"
       name: "{{ storage_account }}"
       append_tags: no
       tags:
           testing: testing
           delete: never
   register: output

 - assert:
       that:
           - "output.state.tags | length == 2"
           - "output.state.tags.testing == 'testing'"
           - "output.state.tags.delete == 'never'"

 - name: Update account minimum tls version
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}"
       name: "{{ storage_account }}"
       minimum_tls_version: "TLS1_2" 
   register: output

 - name: Assert status succeeded and results include an Id value 
   assert:
     that:
       - output.changed
       - output.state.minimum_tls_version == "TLS1_2"

 - name: Update account blob public access
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}"
       name: "{{ storage_account }}"
       allow_blob_public_access: true
   register: output

 - name: Assert status succeeded and results include an Id value 
   assert:
     that:
       - output.changed
       - output.state.allow_blob_public_access == true

 - name: Gather facts
   azure_rm_storageaccount_info:
       resource_group: "{{ resource_group }}"
       name: "{{ storage_account }}"
       show_connection_string: True
       show_blob_cors: True
   register: output

 - assert:
       that:
           - "output.storageaccounts | length == 1"
           - not output.storageaccounts[0].custom_domain
           - output.storageaccounts[0].account_type == "Standard_GRS"
           - output.storageaccounts[0].primary_endpoints.blob.connectionstring
           - output.storageaccounts[0].blob_cors
           - output.storageaccounts[0].minimum_tls_version == "TLS1_2" 
           - output.storageaccounts[0].allow_blob_public_access == true
           #- output.storageaccounts[0].https_only
           #- output.storageaccounts[0].network_acls.bypass == "AzureServices"
           #- output.storageaccounts[0].network_acls.default_action == "Deny"
           #- output.storageaccounts[0].network_acls.ip_rules | length == 1

 - name: Gather facts
   azure_rm_storageaccount_info:
       resource_group: "{{ resource_group }}"
   register: output

 - assert:
       that:
           - "output.storageaccounts | length > 0"

 - name: Delete acccount
   azure_rm_storageaccount:
       resource_group: "{{ resource_group }}" 
       name: "{{ storage_account }}"
       state: absent
       force_delete_nonempty: True
