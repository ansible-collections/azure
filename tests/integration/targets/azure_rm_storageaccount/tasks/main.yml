- name: Set Storage Account Names
  set_fact:
    storage_account_name_default: "sa{{ resource_group | hash('md5') | truncate(20, True, '') }}"
    storage_account_name_explicit: "sa{{ resource_group | hash('sha1') | truncate(20, True, '') }}"

- name: Test invalid account name
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "invalid_char$"
    account_type: Standard_LRS
  register: output
  ignore_errors: yes

- name: Check intentional name failure.
  assert: 
    that: 
      - output.failed
      - output.msg is regex('AccountNameInvalid')

- name: Delete storage accounts to prepare fresh deployment
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ item }}"
    state: absent
    force_delete_nonempty: True
  loop:
    - "{{ storage_account_name_default }}"
    - "{{ storage_account_name_explicit }}"
    - "{{ storage_account_name_default }}02"

- name: Create new storage account with defaults (omitted parameters)
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_default }}"
    account_type: Standard_LRS
  register: defaults_output

- name: Assert status succeeded and results match expectations
  assert:
    that:
      - defaults_output.changed
      - defaults_output.state.name == storage_account_name_default
      - defaults_output.state.id is defined
      - defaults_output.state.https_only
      - defaults_output.state.access_tier == None
      - defaults_output.state.allow_blob_public_access == None
      - defaults_output.state.minimum_tls_version == None

- name: Create new storage account with I(kind=FileStorage)
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_default }}02"
    account_type: Premium_ZRS
    kind: FileStorage
  register: filestorage_output

- name: Assert status succeeded and results match I(kind=FileStorage)
  assert:
    that:
      - filestorage_output.changed
      - filestorage_output.state.sku_name == "Premium_ZRS"

- name: Create new storage account with explicit parameters
  azure_rm_storageaccount:
    access_tier: Hot
    account_type: Premium_LRS
    allow_blob_public_access: False
    append_tags: no
    blob_cors:
      - allowed_origins:
          - http://www.example.com/
        allowed_methods:
          - GET
          - POST
        allowed_headers:
          - x-ms-meta-data*
          - x-ms-meta-target*
          - x-ms-meta-abc
        exposed_headers:
          - x-ms-meta-*
        max_age_in_seconds: 200
    https_only: False
    kind: StorageV2
    location: eastus
    minimum_tls_version: 'TLS1_2'
    name: "{{ storage_account_name_explicit }}"
    network_acls:
      bypass: AzureServices
      default_action: Deny
      ip_rules:
        - value: '9.9.9.9'
          action: Allow
    resource_group: "{{ resource_group }}"
    tags:
      test: test
      galaxy: galaxy
  register: explicit_output

- name: Assert status succeeded and correct parameter results
  assert:
    that:
      - explicit_output.changed
      - explicit_output.state.id is defined
      - explicit_output.state.blob_cors | length == 1
      - not explicit_output.state.https_only
      - not explicit_output.state.allow_blob_public_access
      - explicit_output.state.minimum_tls_version == 'TLS1_2'
      - explicit_output.state.network_acls.bypass == "AzureServices"
      - explicit_output.state.network_acls.default_action == "Deny"
      - explicit_output.state.network_acls.ip_rules | length == 1

- name: Update existing storage account (idempotence)
  azure_rm_storageaccount:
    access_tier: Hot
    account_type: Premium_LRS
    allow_blob_public_access: False
    append_tags: no
    blob_cors:
      - allowed_origins:
          - http://www.example.com/
        allowed_methods:
          - GET
          - POST
        allowed_headers:
          - x-ms-meta-data*
          - x-ms-meta-target*
          - x-ms-meta-abc
        exposed_headers:
          - x-ms-meta-*
        max_age_in_seconds: 200
    https_only: False
    kind: StorageV2
    location: eastus
    minimum_tls_version: 'TLS1_2'
    name: "{{ storage_account_name_explicit }}"
    network_acls:
      bypass: AzureServices
      default_action: Deny
      ip_rules:
        - value: '9.9.9.9'
          action: Allow
    resource_group: "{{ resource_group }}"
    tags:
      test: test
      galaxy: galaxy
  register: output

- name: Assert that properties have not changed
  assert:
    that:
      - not output.changed
      - output.state.access_tier == explicit_output.state.access_tier
      - output.state.allow_blob_public_access == explicit_output.state.allow_blob_public_access
      - output.state.blob_cors == explicit_output.state.blob_cors
      - output.state.custom_domain == explicit_output.state.custom_domain
      - output.state.https_only == explicit_output.state.https_only
      - output.state.id == explicit_output.state.id
      - output.state.location == explicit_output.state.location
      - output.state.minimum_tls_version == explicit_output.state.minimum_tls_version
      - output.state.name == explicit_output.state.name
      - output.state.network_acls == explicit_output.state.network_acls
      - output.state.primary_endpoints == explicit_output.state.primary_endpoints
      - output.state.primary_location == explicit_output.state.primary_location
      - output.state.secondary_endpoints == explicit_output.state.secondary_endpoints
      - output.state.secondary_location == explicit_output.state.secondary_location
      - output.state.sku_name == explicit_output.state.sku_name
      - output.state.sku_tier == explicit_output.state.sku_tier
      - output.state.tags == explicit_output.state.tags

- name: Update existing storage account with parameters omitted
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_explicit }}"
  register: output

- name: Assert that properties have not changed
  assert:
    that:
      - not output.changed
      - output.state.access_tier == explicit_output.state.access_tier
      - output.state.allow_blob_public_access == explicit_output.state.allow_blob_public_access
      - output.state.blob_cors == explicit_output.state.blob_cors
      - output.state.custom_domain == explicit_output.state.custom_domain
      - output.state.https_only == explicit_output.state.https_only
      - output.state.id == explicit_output.state.id
      - output.state.location == explicit_output.state.location
      - output.state.minimum_tls_version == explicit_output.state.minimum_tls_version
      - output.state.name == explicit_output.state.name
      - output.state.network_acls == explicit_output.state.network_acls
      - output.state.primary_endpoints == explicit_output.state.primary_endpoints
      - output.state.primary_location == explicit_output.state.primary_location
      - output.state.secondary_endpoints == explicit_output.state.secondary_endpoints
      - output.state.secondary_location == explicit_output.state.secondary_location
      - output.state.sku_name == explicit_output.state.sku_name
      - output.state.sku_tier == explicit_output.state.sku_tier
      - output.state.tags == explicit_output.state.tags

- name: Update existing storage account with parameters defined
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_default }}"
    allow_blob_public_access: False
    append_tags: no
    blob_cors:
      - allowed_origins:
          - http://www.example.com/
        allowed_methods:
          - GET
          - POST
        allowed_headers:
          - x-ms-meta-data*
          - x-ms-meta-target*
          - x-ms-meta-abc
        exposed_headers:
          - x-ms-meta-*
        max_age_in_seconds: 200
    https_only: False
    kind: StorageV2
    minimum_tls_version: 'TLS1_1'
    network_acls:
      bypass: AzureServices
      default_action: Deny
      ip_rules:
        - value: '9.9.9.9'
          action: Allow
    tags:
      test: test
      galaxy: galaxy
  register: output

- name: Assert account change success
  assert:
    that:
      - output.changed
      - output.state.allow_blob_public_access == False
      - output.state.allow_blob_public_access != None
      - output.state.https_only == False
      - output.state.https_only != None
      - output.state.minimum_tls_version == 'TLS1_1'
      - output.state.name == storage_account_name_default
      - output.state.tags == explicit_output.state.tags
      # These tests should be valid, but is currently broken due to 'output' not containing blob_cors and network_acls.ip_rules
      # - output.state.blob_cors == explicit_output.state.blob_cors
      # - output.state.network_acls == explicit_output.state.network_acls

- name: Change existing account type (invalid)
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_default }}"
    account_type: Premium_LRS
  register: output
  ignore_errors: yes

- name: Assert account type change failed
  assert:
    that:
      - output.failed
      - output.msg is regex('Storage account of type .* cannot be changed')

- name: Unverified custom domain failure
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_default }}"
    custom_domain:
      name: ansible.com
      use_sub_domain: no
  ignore_errors: yes  
  register: output

- name: Assert CNAME failure
  assert: 
    that: 
      - output.failed
      - output.msg is regex('custom domain name could not be verified')

- name: Gather facts by tags
  azure_rm_storageaccount_info:
    resource_group: "{{ resource_group }}"
    tags:
      - test
      - galaxy
  register: output

- assert:
      that: output.storageaccounts | length >= 1

- name: Update account tags
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_explicit }}"
    append_tags: no
    tags:
      testing: testing
      delete: never
  register: output

- assert:
    that:
      - "output.state.tags | length == 2"
      - "output.state.tags.testing == 'testing'"
      - "output.state.tags.delete == 'never'"

- name: Gather facts connection string and blob_cors
  azure_rm_storageaccount_info:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name_explicit }}"
    show_connection_string: True
    show_blob_cors: True
  register: output

- assert:
    that:
      - "output.storageaccounts | length == 1"
      - not output.storageaccounts[0].custom_domain
      - output.storageaccounts[0].account_type == "Premium_LRS"
      - output.storageaccounts[0].primary_endpoints.blob.connectionstring
      - output.storageaccounts[0].blob_cors
      - output.storageaccounts[0].minimum_tls_version == "TLS1_2"
      - not output.storageaccounts[0].allow_blob_public_access
      - not output.storageaccounts[0].https_only
      - output.storageaccounts[0].network_acls.bypass == "AzureServices"
      - output.storageaccounts[0].network_acls.default_action == "Deny"
      - output.storageaccounts[0].network_acls.ip_rules | length == 1

- name: List storage accounts by resource group.
  azure_rm_storageaccount_info:
    resource_group: "{{ resource_group }}"
  register: output

- assert:
    that:
      - "output.storageaccounts | length >= 2"

- name: Delete storage accounts
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ item }}"
    state: absent
    force_delete_nonempty: True
  loop:
    - "{{ storage_account_name_default }}"
    - "{{ storage_account_name_default }}02"
    - "{{ storage_account_name_explicit }}"
