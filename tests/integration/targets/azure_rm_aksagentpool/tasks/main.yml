- set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(8, True, '') }}"

- name: Find available k8s version
  azure_rm_aksversion_info:
    location: eastus
  register: versions

- name: Create a kubernet service with minimal parameters
  azure_rm_aks:
    name: "min{{ rpfx }}"
    location: eastus
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    aad_profile:
      managed: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_B2s
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: no
    network_profile:
      load_balancer_sku: standard
      outbound_type: loadBalancer
  register: output

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: output

- name: Assert the cluster with one agent pool
  assert:
    that:
      - "output.aks_agent_pools | length == 1"

- name: Get aks agent pool support version
  azure_rm_aksagentpoolversion_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: agentpool_version

- name: Assert the orchestrator version is not None
  assert:
    that:
      - "agentpool_version.azure_orchestrator_version | length >= 1"

- name: Add agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: True
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool created
  assert:
    that:
      - output.changed

- name: Add agent pool (Idempotent test)
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: True
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool not changed
  assert:
    that:
      - not output.changed

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: output

- name: Assert node agent pool
  assert:
    that:
      - "output.aks_agent_pools | length == 2"

- name: Upgrade node agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: True
    min_count: 2
    max_count: 20
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool udpated
  assert:
    that:
      - output.changed

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
  register: output

- name: Assert node agent configuration
  assert:
    that:
      - output.aks_agent_pools[0].availability_zones == [1, 2]
      - output.aks_agent_pools[0].count == 1
      - output.aks_agent_pools[0].min_count == 2
      - output.aks_agent_pools[0].max_count == 20
      - output.aks_agent_pools[0].type_properties_type == "VirtualMachineScaleSets"
      - output.aks_agent_pools[0].max_pods == 42
      - output.aks_agent_pools[0].orchestrator_version == agentpool_version.azure_orchestrator_version[0]

- name: Delete node agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    state: absent
  register: output

- name: Assert the node agent pool has deleted
  assert:
    that:
      - output.changed
