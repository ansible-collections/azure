- name: Set varialbes
  ansible.builtin.set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(8, True, '') }}"

- name: Find available k8s version
  azure_rm_aksversion_info:
    location: eastus
  register: versions

- name: Create a kubernet service with minimal parameters
  azure_rm_aks:
    name: "min{{ rpfx }}"
    location: eastus
    resource_group: "{{ resource_group }}"
    kubernetes_version: "{{ versions.azure_aks_versions[0] }}"
    dns_prefix: "aks{{ rpfx }}"
    enable_rbac: true
    aad_profile:
      managed: true
    agent_pool_profiles:
      - name: default
        count: 1
        vm_size: Standard_B2s
        mode: System
    api_server_access_profile:
      authorized_ip_ranges:
        - "192.0.2.0"
        - "198.51.100.0"
        - "203.0.113.0"
      enable_private_cluster: false
    network_profile:
      load_balancer_sku: standard
      outbound_type: loadBalancer
  register: output

- name: Get managecluster admin credentials
  azure_rm_akscredentials_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    show_admin_credentials: true
  register: output

- name: Verify that the cluster credentials are successfully obtained
  ansible.builtin.assert:
    that:
      - output.cluster_credentials | length == 1

- name: Get managecluster user credentials
  azure_rm_akscredentials_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    show_user_credentials: true
  register: output

- name: Verify that the cluster credentials are successfully obtained
  ansible.builtin.assert:
    that:
      - output.cluster_credentials | length == 1

- name: Get managecluster monitor user credentials
  azure_rm_akscredentials_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    show_monitor_credentials: true
  register: output

- name: Verify that the cluster credentials are successfully obtained
  ansible.builtin.assert:
    that:
      - output.cluster_credentials | length == 1

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: output

- name: Assert the cluster with one agent pool
  ansible.builtin.assert:
    that:
      - "output.aks_agent_pools | length == 1"

- name: Get aks agent pool support version
  azure_rm_aksagentpoolversion_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: agentpool_version

- name: Assert the orchestrator version is not None
  ansible.builtin.assert:
    that:
      - "agentpool_version.azure_orchestrator_version | length >= 1"

- name: Add agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: true
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Add agent pool (Idempotent test)
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: true
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool not changed
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
  register: output

- name: Assert node agent pool
  ansible.builtin.assert:
    that:
      - "output.aks_agent_pools | length == 2"

- name: Upgrade node agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: true
    min_count: 2
    max_count: 20
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
      - 2
  register: output

- name: Assert the node agent pool udpated
  ansible.builtin.assert:
    that:
      - output.changed

- name: Get cluster's node agent pool info
  azure_rm_aksagentpool_info:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
  register: output

- name: Assert node agent configuration
  ansible.builtin.assert:
    that:
      - output.aks_agent_pools[0].availability_zones == [1, 2]
      - output.aks_agent_pools[0].min_count == 2
      - output.aks_agent_pools[0].max_count == 20
      - output.aks_agent_pools[0].type_properties_type == "VirtualMachineScaleSets"
      - output.aks_agent_pools[0].max_pods == 42
      - output.aks_agent_pools[0].orchestrator_version == agentpool_version.azure_orchestrator_version[0]

- name: Create proximity placement group
  azure_rm_proximityplacementgroup:
    resource_group: "{{ resource_group }}"
    name: "proxi{{ rpfx }}"
  register: proxi_output

- name: Create public ip prefix
  azure_rm_publicipprefix:
    resource_group: "{{ resource_group }}"
    name: "pipprefix{{ rpfx }}"
    zones:
      - 1
    public_ip_address_version: IPV4
    prefix_length: 29
    sku:
      name: Standard
      tier: Regional
  register: pip_output

- name: Create a new agent pool with multi parameters
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default06
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: true
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
    kubelet_disk_type: OS
    workload_runtime: OCIContainer
    os_sku: Ubuntu
    scale_down_mode: Delete
    upgrade_settings:
      max_surge: 50%
    power_state:
      code: Running
    enable_node_public_ip: true
    scale_set_priority: Regular
    node_public_ip_prefix_id: "{{ pip_output.state.id }}"
    spot_max_price: 85
    proximity_placement_group_id: "{{ proxi_output.state.id }}"
    enable_encryption_at_host: false
    enable_ultra_ssd: false
    enable_fips: true
    tags:
      key2: value2
  register: output

- name: Assert the node agent pool create well
  ansible.builtin.assert:
    that:
      - output.changed

- name: Create a new agent pool with multi parameters( Idempotent test)
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default06
    count: 1
    vm_size: Standard_B2s
    type_properties_type: VirtualMachineScaleSets
    mode: System
    node_labels: {"release":"stable"}
    max_pods: 42
    enable_auto_scaling: true
    min_count: 1
    max_count: 10
    orchestrator_version: "{{ agentpool_version.azure_orchestrator_version[0] }}"
    availability_zones:
      - 1
    kubelet_disk_type: OS
    workload_runtime: OCIContainer
    os_sku: Ubuntu
    scale_down_mode: Delete
    upgrade_settings:
      max_surge: 50%
    power_state:
      code: Running
    enable_node_public_ip: true
    scale_set_priority: Regular
    node_public_ip_prefix_id: "{{ pip_output.state.id }}"
    spot_max_price: 85
    proximity_placement_group_id: "{{ proxi_output.state.id }}"
    enable_encryption_at_host: false
    enable_ultra_ssd: false
    enable_fips: true
    tags:
      key2: value2
  register: output

- name: Assert the node agent pool no change
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Delete node agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default06
    state: absent

- name: Delete node agent pool
  azure_rm_aksagentpool:
    resource_group: "{{ resource_group }}"
    cluster_name: "min{{ rpfx }}"
    name: default03
    state: absent
  register: output

- name: Assert the node agent pool has deleted
  ansible.builtin.assert:
    that:
      - output.changed
