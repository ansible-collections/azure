- name: Prepare random number
  ansible.builtin.set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: true

- name: Create a VirtualWan
  azure_rm_virtualwan:
    resource_group: "{{ resource_group }}"
    name: "virtualwan{{ rpfx }}"
    office365_local_breakout_category: All
    disable_vpn_encryption: true
    allow_branch_to_branch_traffic: true
    allow_vnet_to_vnet_traffic: true
    virtual_wan_type: Basic
  register: output

- name: Assert the virtual wan created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Create a VirtualWan again (Idempotent test)
  azure_rm_virtualwan:
    resource_group: "{{ resource_group }}"
    name: "virtualwan{{ rpfx }}"
  register: output

- name: Assert idempotent
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Update the VirtualWan
  azure_rm_virtualwan:
    resource_group: "{{ resource_group }}"
    office365_local_breakout_category: All
    name: "virtualwan{{ rpfx }}"
    disable_vpn_encryption: false
    allow_branch_to_branch_traffic: true
    allow_vnet_to_vnet_traffic: true
    virtual_wan_type: Basic
  register: output

- name: Assert the virtual wan updated
  ansible.builtin.assert:
    that:
      - output.changed

- name: Get VirtualWan info
  azure_rm_virtualwan_info:
    resource_group: "{{ resource_group }}"
    name: "virtualwan{{ rpfx }}"
  register: output

- name: Assert the virtual wan facts
  ansible.builtin.assert:
    that:
      - output.virtual_wans[0]['allow_branch_to_branch_traffic'] == true
      - output.virtual_wans[0]['disable_vpn_encryption'] == false

- name: Delete the VirtualWan
  azure_rm_virtualwan:
    resource_group: "{{ resource_group }}"
    name: "virtualwan{{ rpfx }}"
    state: absent
