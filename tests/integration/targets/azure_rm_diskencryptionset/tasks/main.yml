- name: Prepare random number
  set_fact:
    set_name: "des{{ resource_group | hash('md5') | truncate(22, True, '') }}"
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
    tenant_id: "{{ azure_tenant }}"
  run_once: yes

- name: lookup service principal object id
  set_fact:
    object_id: "{{ lookup('azure_service_principal_attribute',
                   azure_client_id=azure_client_id,
                   azure_secret=azure_secret,
                   azure_tenant=tenant_id) }}"
  register: object_id_facts

- name: create a key vault
  azure_rm_keyvault:
    resource_group: "{{ resource_group }}"
    vault_name: "myvault{{ rpfx }}"
    enabled_for_disk_encryption: yes
    vault_tenant: "{{ tenant_id }}"
    sku:
      name: standard
      family: A
    access_policies:
      - tenant_id: "{{ tenant_id }}"
        object_id: "{{ object_id }}"
        keys:
          - get
          - list
          - wrapkey
          - unwrapkey
          - create
          - update
          - import
          - delete
          - backup
          - restore
          - recover
          - purge

- name: Create a key in key vault
  azure_rm_keyvaultkey:
    key_name: testkey
    keyvault_uri: https://myvault{{ rpfx }}.vault.azure.net

- name: Get latest version of key
  azure_rm_keyvaultkey_info:
    vault_uri: https://myvault{{ rpfx }}.vault.azure.net
    name: testkey
  register: results

- set_fact:
    key_url: "{{ results['keys'][0]['kid'] }}"

- name: create disk encryption set
  azure_rm_diskencryptionset:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
    source_vault: "myvault{{ rpfx }}"
    key_url: "{{ key_url }}"
    state: present
  register: results

- name: Assert that disk encryption set is created
  assert:
    that: results.changed

- name: create disk encryption set (Idempotent test)
  azure_rm_diskencryptionset:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
    source_vault: "myvault{{ rpfx }}"
    key_url: "{{ key_url }}"
    state: present
  register: results

- name: Assert that output is not changed
  assert:
    that: not results.changed

- name: Update disk encryption set
  azure_rm_diskencryptionset:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
    source_vault: "myvault{{ rpfx }}"
    key_url: "{{ key_url }}"
    state: present
    tags:
      key1: "value1"
  register: results

- name: Assert that disk encryption set is updated
  assert:
    that: results.changed

- name: Get disk encryption set facts
  azure_rm_diskencryptionset_info:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
  register: results

- assert:
    that:
      - not results.changed
      - results.diskencryptionsets[0].id != None
      - results.diskencryptionsets[0].name == "{{ set_name }}"
      - results.diskencryptionsets[0].active_key != None
      - results.diskencryptionsets[0].provisioning_state == "Succeeded"
      - results.diskencryptionsets[0].tags | length > 0

- name: Delete disk encryption set
  azure_rm_diskencryptionset:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
    state: absent
  register: results

- name: Assert that disk encryption set is deleted
  assert:
    that: results.changed

- name: Delete disk encryption set (Idempotent test)
  azure_rm_diskencryptionset:
    resource_group: "{{ resource_group }}"
    name: "{{ set_name }}"
    state: absent
  register: results

- name: Asset that output is not changed
  assert:
    that: not results.changed

- name: Delete the Key Vault
  azure_rm_keyvault:
    resource_group: "{{ resource_group }}"
    vault_name: "myvault{{ rpfx }}"
    state: absent
