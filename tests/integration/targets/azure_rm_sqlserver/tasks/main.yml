- name: Prepare random number
  set_fact:
    random_postfix: "{{ 1000 | random }}{{ resource_group | hash('md5') | truncate(7, True, '') }}"
    tenant_id: "{{ azure_tenant }}"
    run_azuread_tests: false
    azuread_group_name: "Test Security Group"
    azuread_group_id: "00000000-0000-0000-0000-000000000000"
  run_once: yes

- name: Create instance of SQL Server -- check mode
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    location: eastus
    admin_username: mylogin
    admin_password: Password123!
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    location: eastus
    admin_username: mylogin
    admin_password: Password123!
    tags:
      aaa: bbb
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.state == 'Ready'

- name: Create again instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    location: eastus
    admin_username: mylogin
    admin_password: Password123!
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.state == 'Ready'

- name: Create extended instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-extended-{{ random_postfix }}"
    location: eastus
    admin_username: mylogin2
    admin_password: Password123!
    minimal_tls_version: '1.2'
    public_network_access: Disabled
    restrict_outbound_network_access: Enabled
    tags:
      aaa: bbb
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.state == 'Ready'

- name: Create extended instance of SQL Server - idempotent
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-extended-{{ random_postfix }}"
    location: eastus
    admin_username: mylogin2
    admin_password: Password123!
    minimal_tls_version: '1.2'
    public_network_access: Disabled
    restrict_outbound_network_access: Enabled
    tags:
      aaa: bbb
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - not output.changed
      - output.state == 'Ready'

- name: Update SQL admin password
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-extended-{{ random_postfix }}"
    location: eastus
    admin_password: Password123!321!
    change_admin_password: true
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Create instance of SQL Server with Azure AD admin
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-azuread-{{ random_postfix }}"
    location: eastus
    admin_username: sqllogin
    admin_password: Password123!
    administrators:
      principal_type: Group
      login: "{{ azuread_group_name }}"
      sid: "{{ azuread_group_id }}"
      tenant_id: "{{ tenant_id }}"
      azure_ad_only_authentication: false
  register: output
  when: run_azuread_tests | bool
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.state == 'Ready'
  when: run_azuread_tests | bool

- name: Create instance of SQL Server with Azure AD admin - idempotent
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-azuread-{{ random_postfix }}"
    location: eastus
    admin_username: sqllogin
    admin_password: Password123!
    administrators:
      principal_type: Group
      login: "{{ azuread_group_name }}"
      sid: "{{ azuread_group_id }}"
      tenant_id: "{{ tenant_id }}"
      azure_ad_only_authentication: false
  register: output
  when: run_azuread_tests | bool
- name: Assert the state has not changed
  assert:
    that:
      - not output.changed
      - output.state == 'Ready'
  when: run_azuread_tests | bool

# azure_rm_sqlserver_facts tests

- name: Gather facts SQL Server
  azure_rm_sqlserver_info:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv{{ random_postfix }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers.sqlsrv{{ random_postfix }}.id != None
      - output.servers.sqlsrv{{ random_postfix }}.name == "sqlsrv{{ random_postfix }}"
      - output.servers.sqlsrv{{ random_postfix }}.type != None
      - output.servers.sqlsrv{{ random_postfix }}.location != None
      - output.servers.sqlsrv{{ random_postfix }}.kind != None
      - output.servers.sqlsrv{{ random_postfix }}.version != None
      - output.servers.sqlsrv{{ random_postfix }}.state != None
      - output.servers.sqlsrv{{ random_postfix }}.fully_qualified_domain_name != None
      - output.servers.sqlsrv{{ random_postfix }}.tags.aaa == 'bbb'
      - output.servers.sqlsrv{{ random_postfix }}.admin_username == 'mylogin'
      - output.servers.sqlsrv{{ random_postfix }}.administrators == None

- name: Gather facts for extended SQL Server
  azure_rm_sqlserver_info:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv-extended-{{ random_postfix }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].id != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].name == 'sqlsrv-extended-{{ random_postfix }}'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].type != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].location != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].kind != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].version != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].state != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].fully_qualified_domain_name != None
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].tags.aaa == 'bbb'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].minimal_tls_version == '1.2'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].public_network_access == 'Disabled'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].restrict_outbound_network_access == 'Enabled'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].admin_username == 'mylogin2'
      - output.servers['sqlsrv-extended-{{ random_postfix }}'].administrators == None

- name: Gather facts for SQL Server with Azure AD admin
  azure_rm_sqlserver_info:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv-azuread-{{ random_postfix }}"
  register: output
  when: run_azuread_tests | bool
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].id != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].name == 'sqlsrv-azuread-{{ random_postfix }}'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].type != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].location != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].kind != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].version != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].state != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].fully_qualified_domain_name != None
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].tags | length == 0
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].admin_username == 'sqllogin'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.administrator_type == 'ActiveDirectory'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.azure_ad_only_authentication == False
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.login == '{{ azuread_group_name }}'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.principal_type == 'Group'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.sid == '{{ azuread_group_id }}'
      - output.servers['sqlsrv-azuread-{{ random_postfix }}'].administrators.tenant_id == '{{ tenant_id }}'
  when: run_azuread_tests | bool

- name: Gather facts SQL Server - unexisting
  azure_rm_sqlserver_info:
    resource_group: "{{ resource_group }}"
    server_name: "unexisting"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers == {}

- name: Gather facts SQL Server - list
  azure_rm_sqlserver_info:
    resource_group: "{{ resource_group }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers.sqlsrv{{ random_postfix }}.id != None
      - output.servers.sqlsrv{{ random_postfix }}.name == "sqlsrv{{ random_postfix }}"
      - output.servers.sqlsrv{{ random_postfix }}.type != None
      - output.servers.sqlsrv{{ random_postfix }}.location != None
      - output.servers.sqlsrv{{ random_postfix }}.kind != None
      - output.servers.sqlsrv{{ random_postfix }}.version != None
      - output.servers.sqlsrv{{ random_postfix }}.state != None
      - output.servers.sqlsrv{{ random_postfix }}.fully_qualified_domain_name != None

# azure_rm_sqldatabase tests

- name: Create instance of SQL Database -- check mode
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    location: eastus
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    location: eastus
    edition: premium
    tags:
      aaa: bbb
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.status == 'Online'

- name: Create again instance of SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    location: eastus
    edition: premium
    tags:
      aaa: bbb
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.status == 'Online'

# test database point in time restore
- name: Gather facts SQL Database and wait for restore point
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
  register: output
  until: output.databases[0].earliest_restore_date != None
  retries: 10
  delay: 60
- name: Assert that it can be restored from
  assert:
    that:
      - output.databases[0].id != None
      - output.databases[0].earliest_restore_date != None

- name: Create second SQL Database, restoring from the previous Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    create_mode: point_in_time_restore
    restore_point_in_time: "{{ output.databases[0].earliest_restore_date }}"
    source_database_id: "{{ output.databases[0].id }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}PITR
    location: eastus
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of SQL Database Point in time recovery
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}PITR
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

# test database facter:
- name: Create second SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}second
    location: eastus

- name: Gather facts SQL Database
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0].id != None
      - output.databases[0].name != None
      - output.databases[0].location != None
      - output.databases[0].sku.name != None
      - output.databases[0].sku.tier != None
      - output.databases[0].sku.capacity != None
      - output.databases[0].kind != None
      - output.databases[0].status != None

- name: Gather facts SQL Database
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0].id != None
      - output.databases[0].name != None
      - output.databases[0].location != None
      - output.databases[0].sku.name != None
      - output.databases[0].sku.tier != None
      - output.databases[0].sku.capacity != None
      - output.databases[0].kind != None
      - output.databases[0].status != None
      - output.databases[1].id != None
      - output.databases[1].name != None
      - output.databases[1].location != None
      - output.databases[1].sku.name != None
      - output.databases[1].sku.tier != None
      - output.databases[1].sku.capacity != None
      - output.databases[1].kind != None
      - output.databases[1].status != None

- name: Delete instance of secondary database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}second
    state: absent

# clean up databases
- name: Delete instance of SQL Database -- check mode
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

# Test With SKU
- name: Create SQL Database with sku -- check mode
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
    location: eastus
    sku:
      name: S0
      tier: Standard
  check_mode: yes
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed

- name: Create SQL Database with sku 
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
    location: eastus
    tags:
      aaa: bbb
    sku:
      name: S0
      tier: Standard
  register: output
- name: Assert the resource instance is well created with good SKU
  assert:
    that:
      - output.changed
      - output.status == 'Online'
 
- name: Gather facts SQL Database with good SKU
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0].id != None
      - output.databases[0].name != None
      - output.databases[0].location != None
      - output.databases[0].sku.name == "S0"
      - output.databases[0].sku.tier == "Standard"
      - output.databases[0].sku.capacity != None
      - output.databases[0].kind != None
      - output.databases[0].status != None
     
- name: Create again instance of SQL Database with same SKU
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
    location: eastus
    tags:
      aaa: bbb
    sku:
      name: S0
      tier: Standard
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.status == 'Online'

- name: Create again instance of SQL Database with New SKU
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
    location: eastus
    tags:
      aaa: bbb
    sku:
      name: P1
      tier: Premium
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed
      - output.status == 'Online'

- name: Gather facts SQL Database with good New SKU
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0].id != None
      - output.databases[0].name != None
      - output.databases[0].location != None
      - output.databases[0].sku.name == "P1"
      - output.databases[0].sku.tier == "Premium"
      - output.databases[0].sku.capacity != None
      - output.databases[0].kind != None
      - output.databases[0].status != None

- name: Delete instance of SQL Database
  azure_rm_sqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

# test database facts without databases
- name: Gather facts SQL Database
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: database{{ random_postfix }}2
  register: output
- name: Assert that empty dictionary was returned
  assert:
    that:
      - output.changed == False
      - output.databases | length == 0

- name: Gather facts SQL Database
  azure_rm_sqldatabase_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
  register: output
- name: Assert that empty dictionary was returned (one database is there by default)
  assert:
    that:
      - output.changed == False
      - output.databases | length == 1

# azure_rm_sqlfirewallrule tests

- name: Create instance of Firewall Rule -- check mode
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv{{ random_postfix }}"
    name: firewallrule{{ random_postfix }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of Firewall Rule
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv{{ random_postfix }}"
    name: firewallrule{{ random_postfix }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create again instance of Firewall Rule
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "sqlsrv{{ random_postfix }}"
    name: firewallrule{{ random_postfix }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false

#
# azure_rm_sqlserverfirewallrule_facts
#

- name: Create Firewall Rule - second
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: firewallrule{{ random_postfix }}second
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138

- name: Gather facts SQL Firewall Rule
  azure_rm_sqlfirewallrule_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: firewallrule{{ random_postfix }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.rules[0].id != None
      - output.rules[0].resource_group != None
      - output.rules[0].server_name != None
      - output.rules[0].name != None
      - output.rules[0].start_ip_address != None
      - output.rules[0].end_ip_address != None

- name: Gather facts SQL Firewall Rule
  azure_rm_sqlfirewallrule_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.rules[0].id != None
      - output.rules[0].id != None
      - output.rules[0].resource_group != None
      - output.rules[0].server_name != None
      - output.rules[0].name != None
      - output.rules[0].start_ip_address != None
      - output.rules[0].end_ip_address != None
      - output.rules[1].id != None
      - output.rules[1].resource_group != None
      - output.rules[1].server_name != None
      - output.rules[1].name != None
      - output.rules[1].start_ip_address != None
      - output.rules[1].end_ip_address != None

- name: Delete instance of Firewall Rule
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: firewallrule{{ random_postfix }}
    state: absent
- name: Delete instance of Firewall Rule
  azure_rm_sqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: firewallrule{{ random_postfix }}second
    state: absent

- name: Gather facts SQL Firewall Rule
  azure_rm_sqlfirewallrule_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: firewallrule{{ random_postfix }}
  register: output
- name: Assert that empty dictionary was returned
  assert:
    that:
      - output.changed == False
      - output.rules | length == 0

# azure_rm_sqlelasticpool test

- name: Create instance of SQL Elastic Pool -- check mode
  azure_rm_sqlelasticpool:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
    zone_redundant: False
    tags:
      aaa: bbb
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of SQL Elastic Pool
  azure_rm_sqlelasticpool:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
    zone_redundant: False
    tags:
      aaa: bbb
  register: output

- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of SQL Elastic Pool -- Idempotent test
  azure_rm_sqlelasticpool:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
    zone_redundant: False
    tags:
      aaa: bbb
  register: output

- name: Assert the resource instance is well created
  assert:
    that:
      - not output.changed

- name: Update instance of SQL Elastic Pool
  azure_rm_sqlelasticpool:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
    zone_redundant: True
    tags:
      aaa1: bbb1
  register: output

- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Gather facts SQL Database
  azure_rm_sqlelasticpool_info:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
  register: output

- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.elastic_pool[0].zone_redundant == true
      - output.elastic_pool[0].tags | length == 2

- name: Delete instance of SQL Elastic Pool
  azure_rm_sqlelasticpool:
    resource_group: "{{ resource_group }}"
    server_name: sqlsrv{{ random_postfix }}
    name: EP{{ random_postfix }}
    state: absent
  register: output

- name: Assert the resource instance is deleted
  assert:
    that:
      - output.changed

# finalise & clean up azure_rm_sqlserver test

- name: Delete instance of SQL Server -- check mode
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv{{ random_postfix }}"
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

- name: Delete extended instance of SQL Server
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-extended-{{ random_postfix }}"
    state: absent

- name: Delete instance of SQL Server with Azure AD admin
  azure_rm_sqlserver:
    resource_group: "{{ resource_group }}"
    name: "sqlsrv-azuread-{{ random_postfix }}"
    state: absent
  when: run_azuread_tests | bool
